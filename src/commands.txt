(define stdin *standard-input*)
(define stdout *standard-output*)

(input-port? stdin)
(output-port? stdin)

(input-port? stdout)
(output-port? stdout)

(define f1 (open-output-file "bar.txt"))
(port? f1)
(output-port? f1)
(print "some new text" f1)
(print "some more text" f1)
(close-port f1)
(system "more bar.txt")

(port? f1)
(output-port? f1)

(define f1 (open-input-file "foo.txt"))
(port? f1)
(input-port? f1)
(read f1)
(close-port f1)
(system "more foo.txt")

(define f1 (open-append-file "foo.txt"))
(port? f1)
(input-port? f1)
(output-port? f1)
(print "some append1 text" f1)
(print "some append2 text" f1)
(close-port f1)
(system "more foo.txt")

(define f1 (open-update-file "foo.txt"))
(port? f1)
(input-port? f1)
(output-port? f1)
(print "some update1 text" f1)
(print "some update2 text" f1)
(close-port f1)
(system "more foo.txt")


(get-file-position f1)

(define f1 (open-input-file "foo.txt"))
(get-file-position f1)
(set-file-position f1 10)
(read f1)
(close-port f1)


(define sp1 (open-input-string "1 2 3"))
(read sp1)
(close-port sp1)

(port? sp1)
(input-port? sp1)
(input-string-port? sp1)

(define sp2 (open-output-string))

(port? sp2)
(output-port? sp2)
(output-string-port? sp1)

(print "some text" sp2)
(print "(a b)" sp2)
(display "(x y z)" sp2)

(display (get-output-string sp2))

(define x '(a b c))

(define y '((a 1) (b 2) (c 2)))

(assoc 'a y)
(assoc 'b y)
(assoc 'c y)
(assoc 'd y)

(assv 'a y)
(assv 'b y)
(assv 'c y)
(assv 'd y)

(assq 'a y)
(assq 'b y)
(assq 'c y)
(assq 'd y)

(define (fill vec)
  (let ((i 0))
    (while (< i (vector-length vec))
       (vector-set! vec i i)
       (set! i (+ i 1))))
  vec)
  
(fill (make-vector 10))

(define (rep)
   (while #t
      (display "rep> ")
      (print (eval (read *terminal*)))
      ))

;;
;;
;;

(define fin (open-input-file "./tests/test1.scm"))

(define (do-one p) (let ((p (read p))) (newline) (print p) (eval p)))

(do-one fin)

;;
;;
;;

(define (load-fact)
  (let ((p (open-input-file "./fact.scm")))
    (print (eval (read p)))
    (close-port p)
    p))
    
(begin (load-fact) (fact 10))

(begin (*symbols*) (gc-stats))


